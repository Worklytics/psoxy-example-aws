name: 'Terraform operate'

# ways to run this workflow manually (CLI):
# plan - gh workflow run terraform_operate.yaml -f mode=plan --ref=s147-github-action-deploy
# apply - gh workflow run terraform_operate.yaml -f mode=apply --ref=s147-github-action-deploy
# unlock - gh workflow run terraform_operate.yaml -f mode=unlock -f lock_id=123123 --ref=s147-github-action-deploy
# destroy - gh workflow run terraform_operate.yaml -f mode=destroy --ref=s147-github-action-deploy

on:
  push: # run on all pushes
    branches:
      - '**'
  workflow_dispatch:  # allows this workflow to be triggered manually (see above)
    inputs:
      mode:
        description: 'Whether to apply terraform configuration, not just plan'
        required: true
        default: 'plan'
      lock_id:
        description: 'The lock ID to remove, if mode==unlock'
        required: false

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform_operate:
    name: 'terraform operate (mode: ${{ github.event.inputs.mode }})'
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: 17
      TERRAFORM_VERSION: 1.3.9

      BACKEND_CONFIG_FILE: ./.github/workflows/ci.tfbackend
      TFVARS_FILE: ./.github/workflows/ci.tfvars

      # NOTE: vars context here is in beta;
      #   see https://docs.github.com/en/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows
      # if you wish, revert to using your own hard coded values in this file (values NOT sensitive)

      # NOTE: this role must be configured with trust policy, per https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # have sufficient perms, per https://github.com/Worklytics/psoxy/blob/main/docs/aws/getting-started.md#prerequisites
      # and you must have added GitHub as an OIDC provider in the AWS Account
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ROLE_TO_ASSUME: ${{ vars.AWS_ROLE_TO_ASSUME }}

      # NOTE: must have identity pool + service account in GCP, as described https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ vars.GCP_SERVICE_ACCOUNT }}

      MSFT365_TENANT_ID: ${{ vars.MSFT365_TENANT_ID }}
      AZURE_AD_OIDC_CLIENT_ID: ${{ vars.AZURE_AD_OIDC_CLIENT_ID }}

    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3

      - name: 'Setup Java'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 'setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # use https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - id: aws-oidc
        name: 'authenticate to AWS'
        uses: aws-actions/configure-aws-credentials@v2
        if: ${{ env.AWS_ACCOUNT_ID != null }}
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - id: gcp-oidc
        name: 'authenticate to GCP'
        uses: google-github-actions/auth@v1.1.0
        if: ${{ env.GCP_SERVICE_ACCOUNT != null }}
        with:
          create_credentials_file: true # this should fill GOOGLE_APPLICATION_CREDENTIALS env var with path to file
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          #token_format: id_token
          #id_token_include_email: true
          #id_token_audience: ${{ env.GCP_SERVICE_ACCOUNT }}
      - id: azure-oidc
        name: 'authenticate to Azure'
        uses: azure/login@v1
        if: ${{ env.MSFT365_TENANT_ID != null }}
        with:
          allow-no-subscriptions: true
          client-id: ${{ env.AZURE_AD_OIDC_CLIENT_ID }}
          tenant-id: ${{ env.MSFT365_TENANT_ID }}

      # dflook actions should do this, but don't seem to work well with our hackery in psoxy_base_dir
      - name: 'terraform init'
        run:
          terraform init -backend-config=${{ env.BACKEND_CONFIG_FILE }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'terraform gcloud identity'
        run: |
          gcloud info
          gcloud auth list

      - name: 'download prior bundle'
        uses: actions/download-artifact@v3
        continue-on-error: true # don't die if no prior bundle
        with:
          name: 'deployment_bundle'
          path: ${{ env.PATH_TO_DEPLOYMENT_JAR }}

      # plan
      # TODO: replace with  https://github.com/marketplace/actions/terraform-plan
      # atm, this action doesn't seem to like our value for psoxy_base_dir, complaining no java/pom.xml
      # there; so suggests somehow it's not seen after init??
      # NOTE: lock=false to avoid holding lock while planning
      - name: 'terraform plan'
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.mode == 'plan'
        run: |
          terraform plan \
            -lock=false \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="psoxy_base_dir=${{ github.workspace }}/.terraform/modules/psoxy/" \
            -var-file=${{ env.TFVARS_FILE }}

      # TODO : replace with https://github.com/marketplace/actions/terraform-apply
      # atm, this action doesn't seem to like our value for psoxy_base_dir, complaining no java/pom.xml
      # there; so suggests somehow it's not seen after init??
      - name: 'terraform apply'
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'apply'
        run: |
          terraform apply --auto-approve \
           -var="aws_region=${{ env.AWS_REGION }}" \
           -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
           -var="psoxy_base_dir=${{ github.workspace }}/.terraform/modules/psoxy/" \
           -var="install_test_tool=false" \
           -var-file=${{ env.TFVARS_FILE }}

      - name: 'terraform unlock'
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'unlock'
        run: |
          terraform force-unlock -force ${{github.event.inputs.lock_id}}

      - name: 'terraform destroy'
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'destroy'
        run: |
          terraform destroy --auto-approve \
           -var="aws_region=${{ env.AWS_REGION }}" \
           -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
           -var="psoxy_base_dir=${{ github.workspace }}/.terraform/modules/psoxy/" \
           -var-file=${{ env.TFVARS_FILE }}

      - name: 'collect TODO artifacts'
        if:  github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'apply'
        uses: actions/upload-artifact@v3
        with:
          name: 'TODOs'
          path: |
            ${{ github.workspace }}/TODO**

      - name: 'cache built JAR'
        uses: actions/upload-artifact@v3
        with:
          name: 'deployment_bundle'
          path:
             ${terraform output -raw path_to_deployment_jar}

      - name: 'inventory working directory'
        run:
          ls -al

      - name: 'cat build log'
        run:
          cat last-build.log
