name: 'Terraform plan / apply'


on:
  push: # run on all pushes
    branches:
      - '**'
  workflow_dispatch:  # allows this workflow to be triggered manually ( `gh workflow run terraform_deploy.yaml -f apply=true --ref=s147-github-action-deploy` )
    inputs:
      apply:
        description: 'Whether to apply terraform configuration, not just plan'
        required: true
        default: 'false'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform_plan_apply:
    name: 'terraform_plan_apply'
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: 17
      TERRAFORM_VERSION: 1.3.9

      BACKEND_CONFIG_FILE: ./.github/workflows/ci.tfbackend
      TFVARS_FILE: ./.github/workflows/ci.tfvars


      # NOTE: this role must be configured with trust policy, per https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # have sufficient perms, per https://github.com/Worklytics/psoxy/blob/main/docs/aws/getting-started.md#prerequisites
      # and you must have added GitHub as an OIDC provider in the AWS Account
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 874171213677
      AWS_ROLE_TO_ASSUME: github-actions


      # NOTE: must have identity pool + service account in GCP, as described https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
      GCP_PROJECT_ID: psoxy-dev-erik
      GCP_WORKLOAD_IDENTITY_PROVIDER: projects/1012889821883/locations/global/workloadIdentityPools/example-pool/providers/example-gh-provider
      GCP_SERVICE_ACCOUNT: github-actions@psoxy-dev-erik.iam.gserviceaccount.com

      MSFT365_TENANT_ID: 6e4c8e9f-76cf-41d1-806e-61838b880b87
      AZURE_AD_OIDC_CLIENT_ID: 1254bc3d-0e9f-4b98-b737-90f169829767


    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 'setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Determine Terraform Providers
        id: terraform_providers
        run: |
          terraform init -backend-config=${{env.BACKEND_CONFIG_FILE }} -var-file=${{ env.TFVARS_FILE }}
          echo "AWS_PROVIDER_COUNT=$(terraform providers | grep "^├── provider\[registry.terraform.io/hashicorp/aws" | wc -l)" >> $GITHUB_OUTPUT
          echo "GOOGLE_PROVIDER_COUNT=$(terraform providers | grep "^├── provider\[registry.terraform.io/hashicorp/google" | wc -l)" >> $GITHUB_OUTPUT
          echo "AZUREAD_PROVIDER_COUNT=$(terraform providers | grep "^├── provider\[registry.terraform.io/hashicorp/azuread" | wc -l)" >> $GITHUB_OUTPUT

      - name: Retrieve AWS config values
        id: aws
        if: ${{ steps.terraform_providers.outputs.AWS_PROVIDER_COUNT > 0 }}
        run: |
          echo "ACCOUNT_ID=$(echo "var.aws_account_id" | terraform console -backend-config=${{env.BACKEND_CONFIG_FILE }} -var-file=${{ env.TFVARS_FILE }} | tr -d '\"\'" >> $GITHUB_OUTPUT
          echo "REGION=$(echo "var.aws_region" | terraform console -backend-config=${{env.BACKEND_CONFIG_FILE }} -var-file=${{ env.TFVARS_FILE }} | tr -d '\"\'" >> $GITHUB_OUTPUT


      # use https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - id: aws-oidc
        name: authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        if: ${{ steps.aws.ACCOUNT_ID != null }}
        with:
          role-to-assume: arn:aws:iam::${{ steps.aws.REGION }}:role/${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ steps.aws.REGION }}

      - id: gcp-oidc
        name: authenticate to GCP
        uses: google-github-actions/auth@v1.1.0
        if: ${{ env.GCP_PROJECT_ID != null }}
        with:
          create_credentials_file: true
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - id: azure-oidc
        name: 'authenticate to Azure'
        uses: azure/login@v1
        if: ${{ env.MSFT365_TENANT_ID != null }}
        with:
          allow-no-subscriptions: true
          client-id: ${{ env.AZURE_AD_OIDC_CLIENT_ID }}
          tenant-id: ${{ env.MSFT365_TENANT_ID }}


      - name: 'Terraform init'
        run: |
          terraform init \
            -backend-config=${{env.BACKEND_CONFIG_FILE }}

      # plan
      # see https://github.com/marketplace/actions/terraform-plan
      - name: 'Terraform plan'
        if: github.event_name != 'workflow_dispatch'
        uses: dflook/terraform-plan@v1.29.1
        with:
          backend_config_file: ${{ env.BACKEND_CONFIG_FILE }}
          variables: |
            aws_region="${{ env.AWS_REGION }}"
            aws_account_id=${{ env.AWS_ACCOUNT_ID }}
            psoxy_base_dir="${{ github.workspace }}/.terraform/modules/psoxy/"
          var-file: ${{ env.TFVARS_FILE }}

      # see https://github.com/marketplace/actions/terraform-apply
      - name: 'Terraform apply'
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true'
        uses: dflook/terraform-apply@v1.29.1
        with:
          auto_approve: true
          backend_config_file: ${{ env.BACKEND_CONFIG_FILE }}
          variables: |
            aws_region="${{ env.AWS_REGION }}"
            aws_account_id=${{ env.AWS_ACCOUNT_ID }}
            psoxy_base_dir="${{ github.workspace }}/.terraform/modules/psoxy/"
          var_file: ${{ env.TFVARS_FILE }}


      - name: 'Collect TODO artifacts'
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: 'TODOs'
          path: |
            ${{ github.workspace }}/TODO**
