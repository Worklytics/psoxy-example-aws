name: 'Terraform deploy'

# allows this workflow to be triggered manually
on: [push, workflow_dispatch]

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform_apply:
    name: 'terraform_apply'
    runs-on: ubuntu-latest
    env:
      TERRAFORM_VERSION: 1.3.9

      # NOTE: this role must be configured with trust policy, per https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # and have sufficient perms, per https://github.com/Worklytics/psoxy/blob/main/docs/aws/getting-started.md#prerequisites
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 874171213677
      AWS_ROLE_TO_ASSUME: github-actions


      # NOTE: must have identity pool + service account in GCP, as described https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
      # GCP_PROJECT_ID: psoxy-erik-dev
      GCP_NUMERIC_PROJECT_ID: 1012889821883
      GCP_WORKLOAD_IDENTITY_PROVIDER: projects/1012889821883/locations/global/workloadIdentityPools/github-actions/providers/github'
      GCP_SERVICE_ACCOUNT: github-actions@psoxy-erik-dev.iam.gserviceaccount.com

      # MSFT365_TENANT_ID: 9b0e1b0e-1b0e-1b0e-1b0e-1b0e1b0e1b0e
      # AZURE_AD_OIDC_CLIENT_ID:

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: 'setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # use https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - id: aws-oidc
        name: authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        if: ${{ env.AWS_ACCOUNT_ID != null }}
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ env.GITHUB_ACTION }}-${{ env.GITHUB_ACTOR }}-${{ env.GITHUB_RUN_ID }}
          aws-region: ${{ env.AWS_REGION }}

      - id: gcp-oidc
        name: authenticate to GCP
        uses: google-github-actions/auth@v0.3.1
        if: ${{ env.GCP_PROJECT_ID != null }}
        with:
          create_credentials_file: true
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - id: azure-oidc
        name: 'authenticate to Azure'
        uses: azure/login@v1
        if: ${{ env.MSFT365_TENANT_ID != null }}
        with:
          allow-no-subscriptions: true
          client-id: ${{ env.AZURE_AD_OIDC_CLIENT_ID }}
          tenant-id: ${{ env.MSFT365_TENANT_ID }}

      # for now, just use connectors that don't need GCP/MSFT
      - name: 'Terraform init and apply'
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="psoxy_base_dir=${{ env.GITHUB_WORKSPACE }}/.terraform/modules/psoxy/" \
            -var="enabled_connectors=[\"zoom\",\"hris\"]"

